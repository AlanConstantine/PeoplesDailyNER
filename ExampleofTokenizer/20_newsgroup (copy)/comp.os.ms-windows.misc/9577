Xref: cantaloupe.srv.cs.cmu.edu comp.os.ms-windows.misc:9577 comp.os.ms-windows.programmer.tools:3134
Path: cantaloupe.srv.cs.cmu.edu!das-news.harvard.edu!noc.near.net!howland.reston.ans.net!wupost!waikato.ac.nz!comp.vuw.ac.nz!cc-server4.massey.ac.nz!acmebbs!olson!stefan
Newsgroups: comp.os.ms-windows.misc,comp.os.ms-windows.programmer.tools
Subject: Re: GUI Application Frameworks for Windows ??
Message-ID: <mlV0rAcOBh107h@olson.acme.gen.nz>
From: stefan@olson.acme.gen.nz (Stefan Olson)
Date: Sun, 18 Apr 93 09:36:38 +1200
References: <1993Apr12.154418.14463@cimlinc.uucp>
Lines: 32

In <1993Apr12.154418.14463@cimlinc.uucp> bharper@cimlinc.uucp (Brett Harper) writes:
>Hello,
>  
>  I'm investigating the purchase of an Object Oriented Application Framework.  I have
>come across a few that look good:

>  Zapp 1.1 from Inmark
>  Zinc 3.5 from Zinc software
>  C++/Views from Liant
>  Win++ from Blaise

>Some considerations I'm using:

>  Being new to Windows programming (I'm from the UNIX/X world), the quality and
>intuitivness of the abstraction that these class libraries provide is very 
>important.  However, since I'm not adverse to learning the internals of Windows
>programming, the new programming methodology should be closely aligned with
>the native one.  I don't believe arbitrary levels of abstraction, just for the
>sake of changing the API, are valuable.

The Microsoft Founation classes (afx) that come with C/C++ 7.0 (and 
Visual C++) are very good, they already have a version for NT,
it comes with source code, and is very close to the navtive API.
It also as some classes to manage data structures...

...Stefan

-- 
------------------------------------------------------------------------
   Stefan Olson                     Mail: stefan@olson.acme.gen.nz
   Kindness in giving creates love.
------------------------------------------------------------------------
