Xref: cantaloupe.srv.cs.cmu.edu comp.unix.dos-under-unix:445 comp.sys.ibm.pc.misc:34200 comp.os.ms-windows.apps:11671 comp.os.ms-windows.misc:9622 alt.uu.comp.os.linux.questions:218 comp.apps.spreadsheets:1159 comp.misc:20382 alt.os.linux:2921 comp.os.linux:37362
Newsgroups: comp.unix.dos-under-unix,comp.sys.ibm.pc.misc,comp.sys.ibm.pc.net,comp.os.ms-windows.apps,comp.os.ms-windows.misc,alt.uu.comp.os.linux.questions,comp.apps.spreadsheets,comp.misc,alt.os.linux,comp.os.linux,man.linux
Path: cantaloupe.srv.cs.cmu.edu!crabapple.srv.cs.cmu.edu!fs7.ece.cmu.edu!europa.eng.gtefsd.com!howland.reston.ans.net!agate!doc.ic.ac.uk!uknet!newcastle.ac.uk!turing!n210485
From: Steffi.Beckhaus@newcastle.ac.uk (S. Beckhaus)
Subject: Re: WP-PCF, Linux, RISC?
Nntp-Posting-Host: turing
Message-ID: <C5qtqt.4Gn@newcastle.ac.uk>
Organization: Computing Laboratory, U of Newcastle upon Tyne, UK NE1 7RU.
Date: Mon, 19 Apr 1993 18:23:17 GMT
References: <C56HEo.KKA@ccu.umanitoba.ca> <C5o1yq.M34@csie.nctu.edu.tw> <1qu8ud$2hd@sunb.ocs.mq.edu.au>
Lines: 47


In article <1qu8ud$2hd@sunb.ocs.mq.edu.au>, eugene@mpce.mq.edu.au writes:
>In article <C5o1yq.M34@csie.nctu.edu.tw> ghhwang@csie.nctu.edu.tw (ghhwang) writes:
>>
>>Dear friend,
>>  The RISC means "reduced instruction set computer". The RISC usually has 
>>small instruction set so as to reduce the circuit complex and can increase 
>>the clock rate to have a high performance. You can read some books about
>>computer architecture for more information about RISC.
>
>hmm... not that I am an authority on RISC ;-) but I clearly remember
>reading that the instruction set on RISC CPUs is rather large.
>The difference is in addressing modes - RISC instruction sets are not
>as orthogonal is CISC.
>

I hope this will clear it up :

(Taken from one of my lecture notes)

 " ...  The alternative approach (to CISC),
 which has been adopted by many in
 recent years, has come to be known as "RISC": the Reduced
 Instruction Set Computer.  This can be characterised simply as
 "Simpler is Faster"; by simplifying the design (e.g.  by reducing
 the variety of instructions & addressing modes), the hardware can be
 designed to run faster.  Even at the cost of needing more
 instructions, the same task can be done more quickly by the simpler,
 faster design.

 A typical RISC processor will:

    o provide a large number of registers (e.g.  32);

    o perform all data operations on registers;

    o provide few addressing modes (e.g. immediate or 'register + offset');

    o only allow load & store operations to access memory;

    o only use a few instruction formats;

    o only support a few data types (e.g. integer, unsigned, floating).

Steffi Beckhaus                 JANET: Steffi.Beckhaus@uk.ac.newcastle
If the odds are a million to one against something occurring, chances
are 50-50 it will.
