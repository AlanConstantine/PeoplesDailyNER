Xref: cantaloupe.srv.cs.cmu.edu comp.os.ms-windows.misc:9477 comp.os.ms-windows.programmer.tools:3119
Newsgroups: comp.os.ms-windows.misc,comp.os.ms-windows.programmer.tools
Path: cantaloupe.srv.cs.cmu.edu!crabapple.srv.cs.cmu.edu!fs7.ece.cmu.edu!europa.eng.gtefsd.com!emory!darwin.sura.net!haven.umd.edu!uunet!cimlinc!bharper
From: bharper@cimlinc.uucp (Brett Harper)
Subject: GUI Application Frameworks for Windows ??
Message-ID: <1993Apr12.154418.14463@cimlinc.uucp>
Organization: CIMLINC, Inc. - Engineering
Date: Mon, 12 Apr 1993 15:44:18 GMT
Lines: 63

Hello,
  
  I'm investigating the purchase of an Object Oriented Application Framework.  I have
come across a few that look good:

  Zapp 1.1 from Inmark
  Zinc 3.5 from Zinc software
  C++/Views from Liant
  Win++ from Blaise

Some considerations I'm using:

  Being new to Windows programming (I'm from the UNIX/X world), the quality and
intuitivness of the abstraction that these class libraries provide is very 
important.  However, since I'm not adverse to learning the internals of Windows
programming, the new programming methodology should be closely aligned with
the native one.  I don't believe arbitrary levels of abstraction, just for the
sake of changing the API, are valuable.

  Since we will be developing for the 32bit Windows NT system the
memory management issues and issues particular to the Windows 3.1 API are less
important. 

  We will probably buy another C++ class library (something like Tools.h++ or Booch
components from Rational) to handle data structures and other miscellaneous stuff
 (allocators etc...).  So those features are not that important for this toolkit to have.

The two that I have narrowed it down to are ZApp and Zinc, they seem to be the two
toolkits that have received the most attention from the media.  I was wondering if
anyone had any first-hand experience with any of these toolkits (especially ZApp and Zinc).

A couple of observations about these toolkits that seem particularly noteworthy are:

ZApp
----
  Seems to have the most extensive coverage of Windows functionality and
    also includes some other miscellaneous useful classes.
  Has new fancy 3D-style controls available, and support for custom controls.
  Has a Windows NT version (Essential)
  Redirectable graphics display/output architecture (useful for printing)
  Sizer class for automatically managing control layout after resize.
  Seems to be the newcomer, this could be an advantage in designing a better system.
 
Zinc
----
  Has a platform independent resource strategy.  (Not too important for me right now)
  Comes with a interface builder tool
  Has a Windows NT version (Essential)
  Seems to have been around longer (more mature), but grew up out of a DOS version.  
  Had a better demo :-)

Both have source code availability options
Both are lacking OLE support
Neither seem to have any particular support for multimedia type stuff


Any thoughts anyone has on this would be much appreciated,

Thanks,
  Brett Harper


brett.harper@cimlinc.com
