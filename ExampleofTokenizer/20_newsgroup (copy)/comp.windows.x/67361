Path: cantaloupe.srv.cs.cmu.edu!rochester!udel!gatech!howland.reston.ans.net!usc!enterpoop.mit.edu!senator-bedfellow.mit.edu!jgealow
From: jgealow@mtl.mit.edu (Jeffrey C. Gealow)
Newsgroups: comp.windows.x
Subject: Standard Colormaps
Date: 27 Apr 1993 13:48:56 GMT
Organization: MIT Microsystems Technology Laboratories
Lines: 49
Distribution: world
Message-ID: <1rjdk8INNcnh@senator-bedfellow.MIT.EDU>
NNTP-Posting-Host: mtl.mit.edu

I'm working on an X11R5 application and have concerns regarding 
standard colormaps.

The X11R5 documentation says: "Usually, a window manager creates 
these colormaps."  I wonder what window manager the writer had 
in mind.  Neither twm or mwm seem to create standard colormaps.

Of course, one can use xstdcmap to create standard colormaps.  
However, xstdcmap doesn't seem to try very hard to avoid 
conflicts with the default colormap.  When I use standard 
colormaps created by xstdcmap, the rest of my display goes black.  
So it seems as if use of standard colormaps causes the very 
problem standard colormaps are intended to avoid.  Perhaps 
if every application used standard colormaps, things would 
be wonderful.  But not many applications seem to use 
standard colormaps.

Finally, the operation of the functions XmuGetColormapAllocation, 
XmuStandardColormap, and XmuCreateColormap seem inconsistent 
with the section 14.3 of the X11R5 XLIB documentation.

    According to the section 14.3 of the X11R5 XLIB documentation (p. 436):

    For GrayScale colormaps, only the colormap, red_max, red_mult, and 
    base_pixel members are defined.  The other members are ignored.  
    To compute a GrayScale pixel value, use the following expression:

            (gray * red_mult + base_pixel) &0xFFFFFFFF

    XmuGetColormapAllocation, defined in mit/lib/Xmu/CmapAlloc.c, is 
    used by XmuLookupStandardColormap, defined in mit/lib/Xmu/LookupCmap.c
    to select red_max, green_max, and blue_max values for the 
    call to XmuStandardColormap.  When the RGB_GRAY_MAP property is 
    specified, XmuGetColormapAllocation sets red_max to 30% of the 
    total number of cells in the gray scale, sets green_max to 59% 
    of the total number, and sets blue_max ot 11% of the total number.
    Referring to section 14.3, one would expect XmuGetColormapAllocation 
    to set red_max to the total number of cells in the gray scale.

    When the RGB_GRAY_MAP property is specified, XmuStandardColormap, 
    defined in mit/lib/Xmu/StdCmap.c, sets red_mult, green_mult, 
    and blue_mult all equal to 1.  Referring to section 14.3, 
    one would expect green_mult and blue_mult to be ignored.

    When red_mult, green_mult, and blue_mult all equal 1, 
    XmuCreateColormap, defined in mit/lib/Xmu/CrCmap.c, constructs 
    a gray map. The sum of red_max, green_max, and blue_max gives 
    the maximum gray value.  Referring to section 14.3, on would 
    expect red_max to give the maximum gray value.
