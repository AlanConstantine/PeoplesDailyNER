Xref: cantaloupe.srv.cs.cmu.edu comp.sys.sgi.misc:1907 comp.windows.x:67071
Path: cantaloupe.srv.cs.cmu.edu!crabapple.srv.cs.cmu.edu!fs7.ece.cmu.edu!europa.eng.gtefsd.com!howland.reston.ans.net!noc.near.net!uunet!olivea!sgigate!odin!sgi.com!scotth
From: scotth@oniboshi.corp.sgi.com (Scott Henry)
Newsgroups: comp.sys.sgi.misc,comp.windows.x
Subject: Re: xlock
Message-ID: <SCOTTH.93Apr20090753@oniboshi.corp.sgi.com>
Date: 20 Apr 93 14:07:53 GMT
References: <1qvir1$idi@lll-winken.llnl.gov>
Sender: news@odin.corp.sgi.com (Net News)
Organization: Silicon Graphics Inc, Mountain View, CA
Lines: 21
In-Reply-To: dale@wente.llnl.gov's message of 20 Apr 93 01:15:13 GMT
Nntp-Posting-Host: oniboshi.corp.sgi.com


>>>>> In article <1qvir1$idi@lll-winken.llnl.gov>, dale@wente.llnl.gov (Dale M. Slone) writes:

dale> I found an oddity with our SGI Indigo (MIPS R3000 chip).
dale> When xlock +nolock is running, and I am working remotely
dale> or in batch (at) mode, the runtime of my programs (as timed
dale> by using clock() in the code itself) is ~25% slower than if
dale> xlock is NOT running.  No other processes seem to affect my
dale> runtimes, yet this is very consistent!

Unless you run `xlock -mode blank`, xlock consumes CPU time generating
the nice animated display. The code you are running is competing with
xlock for the CPU. If you run top (via a remote login), you can really
see what is going on.

=-=-=

--
 Scott Henry <scotth@sgi.com> / Help! My disclaimer is missing!
 Networking Services,        / GIGO *really* means: Garbage in, Gospel Out
 Silicon Graphics, Inc      / 
