Xref: cantaloupe.srv.cs.cmu.edu comp.windows.x:67024 comp.windows.x.intrinsics:1152
Path: cantaloupe.srv.cs.cmu.edu!crabapple.srv.cs.cmu.edu!bb3.andrew.cmu.edu!andrew.cmu.edu!rr2b+
From: Robert Andrew Ryan <rr2b+@andrew.cmu.edu>
Newsgroups: comp.windows.x,comp.windows.x.intrinsics
Subject: Re: Monthly Question about XCopyArea() and Expose Events
Date: Mon, 19 Apr 1993 16:47:28 -0400
Organization: School of Computer Science, Carnegie Mellon, Pittsburgh, PA
Lines: 19
Message-ID: <4fokzUa00Woi8HaFAP@andrew.cmu.edu>
References: <BUZZ.93Apr19125438@lion.bear.com>
NNTP-Posting-Host: po5.andrew.cmu.edu
In-Reply-To: <BUZZ.93Apr19125438@lion.bear.com>

Excerpts from netnews.comp.windows.x: 19-Apr-93 Monthly Question about
XCop.. Buzz Moschetti@bear.com (1055) 

> A button widget, when pressed, will cause a new item to be drawn in the
> Window.  This action clearly should not call XCopyArea() 
> (or equiv) directly; instead, it should register the existence of the
> new item in a memory structure and let the same expose event handler
> that handles "regular" expose events (e.g. window manager-driven
> exposures) take care of rendering the new image. 

Hmmm.... Clearly?  Depends on your programming model.  It is not at all
forbidden to draw outside the context of an expose event.  Certainly any
internal data structures should be maintained such that the visual
appearance would be maintained properly whenever an expose event happens
to be generated.  This doesn't preclude drawing immediately after
updating the datastructures though... 

-Rob 
 
